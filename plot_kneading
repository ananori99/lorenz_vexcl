#!/usr/bin/python
#
# Plots kneading invariant from kneading.h5 file that was generated by
# lorenz_sweep.
#
# Requires matplotlib (matplotlib.org)

import sys
import argparse

#----------------------------------------------------------------------------
# Parse commandline arguments
#----------------------------------------------------------------------------
parser = argparse.ArgumentParser('Plot kneading invariant')

parser.add_argument(
    '-f, --file', dest='hdf', default='kneading.h5',
    help='HDF5 file to process'
    )

parser.add_argument(
    '--first', metavar='N', dest='first', type=int, default=1,
    help='Start of kneading subsequence to show (0-based)'
    )

parser.add_argument(
    '--last', metavar='N', dest='last', type=int, default=63,
    help='End of kneading subsequence to show'
    )

parser.add_argument(
    '-q', dest='q', type=float, default=0.5,
    help='Ratio for kneading series'
    )

parser.add_argument(
    '-o,--output', dest='out',
    help='Save result to the specified file instead of plotting'
    )

args = parser.parse_args(sys.argv[1:])

#----------------------------------------------------------------------------
# Import matplotlib
#----------------------------------------------------------------------------
if args.out:
    import matplotlib
    matplotlib.use('Agg')

import h5py
from pylab import *

hdf = h5py.File(args.hdf, 'r')
seq = hdf['/K']

alpha_min   = seq.attrs['alpha_min'][0]
alpha_max   = seq.attrs['alpha_max'][0]
alpha_steps = seq.attrs['alpha_steps'][0]

lambda_min   = seq.attrs['lambda_min'][0]
lambda_max   = seq.attrs['lambda_max'][0]
lambda_steps = seq.attrs['lambda_steps'][0]

kbeg = args.first
kend = min(seq.attrs['kmax'][0], args.last + 1)

K = np.zeros(seq.shape)
for i in range(kbeg, kend):
    K += np.power(args.q, i) * (np.bitwise_and(seq, np.left_shift(1, i))).astype(bool)

#----------------------------------------------------------------------------
rc('text',   usetex=True)
rc('font',   family='serif')
rc('font',   serif='cm')
rc('font',   size=20)
rc('legend', fontsize=18)

#----------------------------------------------------------------------------
fig = figure(num=1, figsize=(7,7))

imshow(K, extent=[alpha_min, alpha_max, lambda_min, lambda_max], aspect=0.5, origin='lower')
colorbar()

xlabel('$\\alpha$')
ylabel('$\\lambda$')
title('Kneading range: \\{%s - %s\\}' % (kbeg, kend - 1))

if args.out:
    savefig(args.out)
else:
    show()
